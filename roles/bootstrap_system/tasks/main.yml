---

- name: update apt packages
  apt: >
    update_cache=yes
    cache_valid_time=3600

- name: upgrade apt packages
  apt: upgrade=yes


- name: "Installing additional packages"
  apt: name={{item}} state=installed force=yes
  with_items:
       - python-software-properties
       - ubuntu-cloud-keyring
       - mc
       - git


- name: "Creating repository file"
  file: path=/etc/apt/sources.list.d/cloudarchive-juno.list state=touch


- name: "Pushing juno repository"
  copy: content={{ juno_url }} dest="/etc/apt/sources.list.d/cloudarchive-juno.list"


- name: "Performing update"
  apt:
    update_cache: yes
    cache_valid_time: 3600


- name: "Performing Dist upgrades"
  apt:
    upgrade: dist


- name: "Checking sysctl file"
  lineinfile: dest=/etc/sysctl.conf line="{{item}}"
  with_items:
    - net.ipv4.ip_forward=1
    - net.ipv4.conf.all.rp_filter=0
    - net.ipv4.conf.default.rp_filter=0
  register: sysctl_check

- name: "Reboot Server"
  shell: sleep 2 && shutdown -r now "Ansible updates triggered"
  async: 1
  poll: 0
  ignore_errors: true
  when: sysctl_check.changed


- name: "Waiting for server to come back"
  local_action: wait_for host={{ inventory_hostname }}
                state=started
                delay=30
                timeout=30
                connect_timeout=15
  when: sysctl_check.changed



- name: "Installing openvswitch packages"
  apt: name={{item}} state=installed
  with_items:
       - openvswitch-switch
       - python-openvswitch


- name: "Adding ovs bridge br-int"
  openvswitch_bridge: bridge=br-int state=present


- name: "Adding ovs bridge br-ex"
  openvswitch_bridge: bridge=br-ex state=present


- name: "Gathering default route"
  shell: "ip route show default | awk '/default/ {print $3}'"
  register: def_gateway_output
- debug: msg="{{def_gateway_output.stdout}}"


- name: "Gathering network interface having internet access"
  shell: "ip route show default | awk '/default/ {print $5}'"
  register: def_internet_interface_output
- debug: msg="{{def_internet_interface_output.stdout}}"


- name: "Gathering ip address of network interface having internet access"
  shell: "/sbin/ifconfig {{def_internet_interface_output.stdout}} | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'"
  register: ip_internet_interface_output
- debug: msg="{{ip_internet_interface_output.stdout}}"


- name: "Gathering netmask of network interface having internet access"
  shell: "/sbin/ifconfig {{def_internet_interface_output.stdout}} | grep 'inet addr:' | cut -d: -f4 | awk '{ print $1}'"
  register: netmask_internet_interface_output
- debug: msg="{{netmask_internet_interface_output.stdout}}"


#- name: Checking rc.local file
#  command: grep -i "ifconfig" /etc/rc.local
#  register: checkrclocal
#  always_run: True
#  ignore_errors: True
#  changed_when: False


- name: "Checking rc.local file"
  lineinfile: dest=/etc/rc.local line="{{item}}"
  with_items:
    - ifconfig br-ex up
    - ifconfig br-int up
  register: rc_local_check


- name: "Updating startup scripts"
  blockinfile:
    dest: /etc/rc.local
    marker: "## {mark} ANSIBLE MANAGED BLOCK ##"
    insertbefore: "exit 0"
    content: |
      sleep 10
      ifconfig {{def_internet_interface_output.stdout}} 0
      ifconfig br-ex up
      ifconfig br-int up
      ifconfig br-ex {{ip_internet_interface_output.stdout}} netmask {{netmask_internet_interface_output.stdout}} up
      route add default gw {{def_gateway_output.stdout}} dev br-ex metric 100
  when: rc_local_check.changed


- name: "Reboot Server"
  shell: ovs-vsctl add-port br-ex {{def_internet_interface_output.stdout}} && sleep 2 && shutdown -r now "Ansible updates triggered"
  async: 1
  poll: 0
  ignore_errors: true


- name: "Waiting for server to come back"
  local_action: wait_for host={{ inventory_hostname }}
                state=started
                delay=30
                timeout=30
                connect_timeout=15


- name: "Gathering default route"
  shell: "ip route show default | awk '/default/ {print $3}'"
  register: def_gateway_output
- debug: msg="{{def_gateway_output.stdout}}"


- name: "Checking internet connectivity"
  shell: "ping -c3 google.com"
  register: ping_output
- debug: msg="{{ ping_output.stdout.split('\n') }}"

